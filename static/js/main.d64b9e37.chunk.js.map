{"version":3,"sources":["logo.svg","DogGallery/DogImage.js","store/actions.js","store/store.js","store/orchestrators.js","store/mutators.js","DogGallery/DogGallery.js","DogGallery/breeds.js","DogGallery/Selector.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DogImage","console","log","src","this","props","className","React","Component","pickBreed","action","breed","updateList","getDogs","addPic","url","getStore","createStore","pics","Set","curr","a","Axios","get","response","urls","data","message","forEach","mutator","actionMessage","Array","from","filter","pic","slice","length","add","orchestrator","callApi","DogGallery","content","map","pageStart","loadMore","hasMore","loader","key","observer","breeds","Selector","value","onChange","event","target","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oKAAAA,EAAOC,QAAU,IAA0B,kC,gLCU5BC,G,uLAJX,OADAC,QAAQC,IAAI,UACL,yBAAKC,IAAKC,KAAKC,MAAMF,IAAKG,UAAU,c,GAHxBC,IAAMC,Y,OCDlBC,EAAYC,iBAAO,aAAa,SAAAC,GAAK,MAAK,CAAEA,YAC5CC,EAAaF,iBAAO,cACpBG,EAAUH,iBAAO,WACjBI,EAASJ,iBAAO,UAAU,SAAAK,GAAG,MAAK,CAAEA,UCIhCC,EANAC,sBAAY,WAAY,CACrCC,KAAM,IAAIC,IACVC,KAAM,GACNT,MAAO,Q,6DCDT,8BAAAU,EAAA,sEACyBC,IAAMC,IAC3B,8CAFJ,OACQC,EADR,OAIQC,EAAOD,EAASE,KAAKC,QAC3B1B,QAAQC,IAAIuB,GACZA,EAAKG,SAAQ,SAASb,GACpBD,EAAOC,MAETH,IATF,4C,sBCDAiB,kBAAQpB,GAAW,SAAAqB,GACjBd,IAAWL,MAAQmB,EAAcnB,SAGnCkB,kBAAQjB,GAAY,WAClBI,IAAWI,KAAOW,MAAMC,KAAKhB,IAAWE,MAAMe,QAC5C,SAAAC,GAAG,OACDA,EAAIC,MAAM,GAAI,GAAKnB,IAAWL,MAAMyB,UAAYpB,IAAWL,OACtC,QAArBK,IAAWL,YAIjBkB,kBAAQf,GAAQ,SAAAgB,GACdd,IAAWE,KAAKmB,IAAIP,EAAcf,QDApCuB,uBAAazB,GAAS,Y,mCACpB0B,M,6BETIC,E,sTAEI3B,I,gIAIN,IAAM4B,EAAUzB,IAAWI,KAAKsB,KAAI,SAAA3B,GAAG,OACrC,4BACE,kBAAC,EAAD,CAAUZ,IAAKY,QAGnB,OACE,kBAAC,IAAD,CACE4B,UAAW,EACXC,SAAU/B,EACVgC,SAAS,EACTC,OACE,yBAAKxC,UAAU,SAASyC,IAAK,GAA7B,gBAKF,wBAAIzC,UAAU,WAAWmC,Q,GAtBRlC,IAAMC,WA4BhBwC,cAASR,GCwDTS,EA7FA,CACb,MACA,gBACA,UACA,WACA,QACA,cACA,UACA,SACA,WACA,SACA,UACA,QACA,YACA,SACA,SACA,UACA,cACA,QACA,YACA,YACA,OACA,UACA,WACA,SACA,YACA,QACA,gBACA,YACA,YACA,OACA,YACA,QACA,QACA,WACA,WACA,cACA,SACA,QACA,iBACA,YACA,cACA,QACA,QACA,WACA,SACA,WACA,SACA,WACA,WACA,QACA,WACA,WACA,UACA,UACA,kBACA,MACA,WACA,eACA,aACA,WACA,WACA,WACA,WACA,UACA,aACA,SACA,MACA,SACA,WACA,UACA,YACA,YACA,aACA,SACA,UACA,aACA,YACA,SACA,WACA,QACA,UACA,UACA,WACA,YACA,UACA,SACA,WACA,aACA,UACA,aClFIC,E,iLAEF,IAAMT,EAAUQ,EAAOP,KAAI,SAAA/B,GAAK,OAAI,gCAASA,MAC7C,OACE,6BACE,4BACEwC,MAAOnC,IAAWL,MAClByC,SAAU,SAAAC,GACR5C,EAAU4C,EAAMC,OAAOH,OACvBvC,MAGD6B,Q,GAZYlC,IAAMC,WAmBdwC,cAASE,GCXTK,MAVf,WACE,OACE,yBAAKjD,UAAU,OACb,kBAAC,EAAD,MAEA,kBAAC,EAAD,QCCckD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d64b9e37.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from \"react\";\r\nimport \"./gallery.css\";\r\n\r\nclass DogImage extends React.Component<> {\r\n  render() {\r\n    console.log(\"render\");\r\n    return <img src={this.props.src} className=\"photo\" />;\r\n  }\r\n}\r\n\r\nexport default DogImage;\r\n","import { action } from \"satcheljs\";\r\n\r\nexport let pickBreed = action(\"pickBreed\", breed => ({ breed }));\r\nexport let updateList = action(\"updateList\");\r\nexport let getDogs = action(\"getDogs\");\r\nexport let addPic = action(\"addPic\", url => ({ url }));\r\n","import { pickBreed } from \"./actions\";\r\nimport { createStore } from \"satcheljs\";\r\n\r\nlet getStore = createStore(\"dogStore\", {\r\n  pics: new Set(),\r\n  curr: [],\r\n  breed: \"All\"\r\n});\r\n\r\nexport default getStore;\r\n","import { orchestrator } from \"satcheljs\";\r\nimport Axios from \"axios\";\r\nimport { getDogs, addPic, updateList } from \"./actions\";\r\nimport \"./mutators\";\r\n\r\nasync function callApi() {\r\n  const response = await Axios.get(\r\n    \"https://dog.ceo/api/breeds/image/random/10\"\r\n  );\r\n  const urls = response.data.message;\r\n  console.log(urls);\r\n  urls.forEach(function(url) {\r\n    addPic(url);\r\n  });\r\n  updateList();\r\n}\r\n\r\norchestrator(getDogs, () => {\r\n  callApi();\r\n});\r\n","import { mutator } from \"satcheljs\";\r\nimport { pickBreed, updateList, addPic } from \"./actions\";\r\nimport getStore from \"./store\";\r\n\r\nmutator(pickBreed, actionMessage => {\r\n  getStore().breed = actionMessage.breed;\r\n});\r\n\r\nmutator(updateList, () => {\r\n  getStore().curr = Array.from(getStore().pics).filter(\r\n    pic =>\r\n      pic.slice(30, 30 + getStore().breed.length) === getStore().breed ||\r\n      getStore().breed === \"All\"\r\n  );\r\n});\r\n\r\nmutator(addPic, actionMessage => {\r\n  getStore().pics.add(actionMessage.url);\r\n});\r\n","import React from \"react\";\r\nimport DogImage from \"./DogImage\";\r\nimport \"./gallery.css\";\r\nimport getStore from \"../store/store\";\r\nimport \"../store/orchestrators\";\r\nimport { getDogs } from \"../store/actions\";\r\nimport { observer } from \"mobx-react\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\n\r\nclass DogGallery extends React.Component {\r\n  async componentDidMount() {\r\n    await getDogs();\r\n  }\r\n\r\n  render() {\r\n    const content = getStore().curr.map(url => (\r\n      <li>\r\n        <DogImage src={url} />\r\n      </li>\r\n    ));\r\n    return (\r\n      <InfiniteScroll\r\n        pageStart={0}\r\n        loadMore={getDogs}\r\n        hasMore={true || false}\r\n        loader={\r\n          <div className=\"loader\" key={0}>\r\n            Loading ...\r\n          </div>\r\n        }\r\n      >\r\n        <ul className=\"gallery\">{content}</ul>\r\n      </InfiniteScroll>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(DogGallery);\r\n","const breeds = [\r\n  \"All\",\r\n  \"affenpinscher\",\r\n  \"african\",\r\n  \"airedale\",\r\n  \"akita\",\r\n  \"appenzeller\",\r\n  \"basenji\",\r\n  \"beagle\",\r\n  \"bluetick\",\r\n  \"borzoi\",\r\n  \"bouvier\",\r\n  \"boxer\",\r\n  \"brabancon\",\r\n  \"briard\",\r\n  \"buhund\",\r\n  \"bulldog\",\r\n  \"bullterrier\",\r\n  \"cairn\",\r\n  \"cattledog\",\r\n  \"chihuahua\",\r\n  \"chow\",\r\n  \"clumber\",\r\n  \"cockapoo\",\r\n  \"collie\",\r\n  \"coonhound\",\r\n  \"corgi\",\r\n  \"cotondetulear\",\r\n  \"dachshund\",\r\n  \"dalmatian\",\r\n  \"dane\",\r\n  \"deerhound\",\r\n  \"dhole\",\r\n  \"dingo\",\r\n  \"doberman\",\r\n  \"elkhound\",\r\n  \"entlebucher\",\r\n  \"eskimo\",\r\n  \"frise\",\r\n  \"germanshepherd\",\r\n  \"greyhound\",\r\n  \"groenendael\",\r\n  \"hound\",\r\n  \"husky\",\r\n  \"keeshond\",\r\n  \"kelpie\",\r\n  \"komondor\",\r\n  \"kuvasz\",\r\n  \"labrador\",\r\n  \"leonberg\",\r\n  \"lhasa\",\r\n  \"malamute\",\r\n  \"malinois\",\r\n  \"maltese\",\r\n  \"mastiff\",\r\n  \"mexicanhairless\",\r\n  \"mix\",\r\n  \"mountain\",\r\n  \"newfoundland\",\r\n  \"otterhound\",\r\n  \"papillon\",\r\n  \"pekinese\",\r\n  \"pembroke\",\r\n  \"pinscher\",\r\n  \"pointer\",\r\n  \"pomeranian\",\r\n  \"poodle\",\r\n  \"pug\",\r\n  \"puggle\",\r\n  \"pyrenees\",\r\n  \"redbone\",\r\n  \"retriever\",\r\n  \"ridgeback\",\r\n  \"rottweiler\",\r\n  \"saluki\",\r\n  \"samoyed\",\r\n  \"schipperke\",\r\n  \"schnauzer\",\r\n  \"setter\",\r\n  \"sheepdog\",\r\n  \"shiba\",\r\n  \"shihtzu\",\r\n  \"spaniel\",\r\n  \"springer\",\r\n  \"stbernard\",\r\n  \"terrier\",\r\n  \"vizsla\",\r\n  \"waterdog\",\r\n  \"weimaraner\",\r\n  \"whippet\",\r\n  \"wolfhound\"\r\n];\r\n\r\nexport default breeds;\r\n","import React from \"react\";\r\nimport \"./gallery.css\";\r\nimport breeds from \"./breeds\";\r\nimport getStore from \"../store/store\";\r\nimport { pickBreed, updateList } from \"../store/actions\";\r\nimport { observer } from \"mobx-react\";\r\nimport \"../store/mutators\";\r\n\r\nclass Selector extends React.Component {\r\n  render() {\r\n    const content = breeds.map(breed => <option>{breed}</option>);\r\n    return (\r\n      <div>\r\n        <select\r\n          value={getStore().breed}\r\n          onChange={event => {\r\n            pickBreed(event.target.value);\r\n            updateList();\r\n          }}\r\n        >\r\n          {content}\r\n        </select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(Selector);\r\n","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport DogGallery from \"./DogGallery/DogGallery\";\r\nimport Selector from \"./DogGallery/Selector\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Selector />\r\n\r\n      <DogGallery />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}